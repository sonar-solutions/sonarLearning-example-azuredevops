trigger:
  branches:
    include:
    - main
    - develop
  
pr:
    - main
    - develop

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Test
  jobs:
  - job: RunTests
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        addToPath: true
      displayName: 'Use Python 3.8'

    - script: |
        echo "Running tests..."
        python --version
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov
        python -m pytest --cov=. --cov-report=xml:$(Build.SourcesDirectory)/coverage.xml --cov-report=html:$(Build.SourcesDirectory)/coverage_html tests/ || true
      displayName: 'Run Python Tests'

    - task: PublishCodeCoverageResults@2
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
      displayName: 'Publish Code Coverage Results'

    - publish: $(Build.SourcesDirectory)/coverage.xml
      artifact: CoverageReport
      displayName: 'Publish Coverage Report'

- stage: SonarQube
  dependsOn: Test
  jobs:
  - job: SonarQubeAnalysis
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    # Disable shallow fetch
      fetchDepth: 0
    - download: current
      artifact: CoverageReport
      displayName: 'Download Coverage Report'

    - task: SonarQubePrepare@7
      inputs:
        SonarQube: 'SonarQube' # This assumes you've set up a service connection named 'SonarQube-Connection'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'SonarQube-Project-Example'
        cliProjectName: 'SonarQube-Project-Example'
        cliSources: 'src/'
        extraProperties: |
          sonar.python.coverage.reportPaths=$(Pipeline.Workspace)/CoverageReport/coverage.xml
      displayName: 'Prepare SonarQube Analysis'

    - task: SonarQubeAnalyze@7
      displayName: 'Run SonarQube Analysis'

    - task: SonarQubePublish@7
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarQube Analysis Results'